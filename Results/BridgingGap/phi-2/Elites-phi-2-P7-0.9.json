{
    "0": "  # Codeimport jsondef extract_json():\tdata = {}\twith open('abm_text.txt', 'r') as f: \t\t for line in f: \t\t\t if 'SPACE' in line: \t\t\t\t space = line.split()[1] \t\t\t\t data['SPACE'] = {space: {}} \t\t\t else: \t\t\t\t key, value = line.strip().split(\":\") \t\t\t\t data['SPACE'][space][key] = value\treturn json.dumps(data)extract_json()  ",
    "1": "  # Codeimport jsondef extract_json():\tdata = {}\twith open('abm_text.txt', 'r') as f: \t\t for line in f: \t\t\t if 'SPACE' in line: \t\t\t\t space = line.split()[1] \t\t\t\t data['SPACE'] = {space: {}} \t\t\t else: \t\t\t\t key, value = line.strip().split(\":\") \t\t\t\t data['SPACE'][space][key] = value\treturn json.dumps(data)extract_json()  ",
    "2": "  # Codeimport jsondef extract_json():\tdata = {}\twith open('abm_text.txt', 'r') as f: \t\t for line in f: \t\t\t if 'SPACE' in line: \t\t\t\t space = line.split()[1] \t\t\t\t data['SPACE'] = {space: {}} \t\t\t else: \t\t\t\t key, value = line.strip().split(\":\") \t\t\t\t data['SPACE'][space][key] = value\treturn json.dumps(data)extract_json()  ",
    "3": "  # Codeimport jsondef extract_json():\tdata = {}\twith open('abm_text.txt', 'r') as f: \t\t for line in f: \t\t\t if 'SPACE' in line: \t\t\t\t space = line.split()[1] \t\t\t\t data['SPACE'] = {space: {}} \t\t\t else: \t\t\t\t key, value = line.strip().split(\":\") \t\t\t\t data['SPACE'][space][key] = value\treturn json.dumps(data)extract_json()  ",
    "4": "  # Codeimport jsondef extract_json():\tdata = {}\twith open('abm_text.txt', 'r') as f: \t\t for line in f: \t\t\t if 'SPACE' in line: \t\t\t\t space = line.split()[1] \t\t\t\t data['SPACE'] = {space: {}} \t\t\t else: \t\t\t\t key, value = line.strip().split(\":\") \t\t\t\t data['SPACE'][space][key] = value\treturn json.dumps(data)extract_json()  ",
    "5": "  # Codeimport jsondef extract_json():\tdata = {}\twith open('abm_text.txt', 'r') as f: \t\t for line in f: \t\t\t if 'SPACE' in line: \t\t\t\t space = line.split()[1] \t\t\t\t data['SPACE'] = {space: {}} \t\t\t else: \t\t\t\t key, value = line.strip().split(\":\") \t\t\t\t data['SPACE'][space][key] = value\treturn json.dumps(data)extract_json()  ",
    "6": "  # Codeimport jsondef extract_json():\tdata = {}\twith open('abm_text.txt', 'r') as f: \t\t for line in f: \t\t\t if 'SPACE' in line: \t\t\t\t space = line.split()[1] \t\t\t\t data['SPACE'] = {space: {}} \t\t\t else: \t\t\t\t key, value = line.strip().split(\":\") \t\t\t\t data['SPACE'][space][key] = value\treturn json.dumps(data)extract_json()  ",
    "7": "  # Codeimport jsondef extract_json():\tdata = {}\twith open('abm_text.txt', 'r') as f: \t\t for line in f: \t\t\t if 'SPACE' in line: \t\t\t\t space = line.split()[1] \t\t\t\t data['SPACE'] = {space: {}} \t\t\t else: \t\t\t\t key, value = line.strip().split(\":\") \t\t\t\t data['SPACE'][space][key] = value\treturn json.dumps(data)extract_json()  ",
    "8": "  # Codeimport jsondef extract_json():\tdata = {}\twith open('abm_text.txt', 'r') as f: \t\t for line in f: \t\t\t if 'SPACE' in line: \t\t\t\t space = line.split()[1] \t\t\t\t data['SPACE'] = {space: {}} \t\t\t else: \t\t\t\t key, value = line.strip().split(\":\") \t\t\t\t data['SPACE'][space][key] = value\treturn json.dumps(data)extract_json()  ",
    "9": "  # Codeimport jsondef extract_json():\tdata = {}\twith open('abm_text.txt', 'r') as f: \t\t for line in f: \t\t\t if 'SPACE' in line: \t\t\t\t space = line.split()[1] \t\t\t\t data['SPACE'] = {space: {}} \t\t\t else: \t\t\t\t key, value = line.strip().split(\":\") \t\t\t\t data['SPACE'][space][key] = value\treturn json.dumps(data)extract_json()  "
}