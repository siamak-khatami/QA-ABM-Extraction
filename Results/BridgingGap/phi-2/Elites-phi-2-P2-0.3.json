{
    "0": "  \"\"\"# %%def get_agent_sets(abm):      \"\"\"      Extracts the agent sets from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent sets      \"\"\"      agent_sets = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          short_desc = parts[1].strip()          agent_set = {\"name\": name, \"short_description\": short_desc}          agent_sets[name] = agent_set      return agent_sets# %%def get_agent_roles(abm):      \"\"\"      Extracts the agent roles from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent roles      \"\"\"      agent_roles = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          agent_type = parts[1].strip()          agent_role = {\"name\": name, \"agent_type\": agent_type}          agent_roles[name] = agent_role      return agent_roles# %%def get_parameter_combinations(abm):      \"\"\"      Extracts the parameter combinations from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the parameter combinations      \"\"\"      parameters = []      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          params = {}           ",
    "1": "  \"\"\"# %%def get_agent_sets(abm):      \"\"\"      Extracts the agent sets from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent sets      \"\"\"      agent_sets = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          short_desc = parts[1].strip()          agent_set = {\"name\": name, \"short_description\": short_desc}          agent_sets[name] = agent_set      return agent_sets# %%def get_agent_roles(abm):      \"\"\"      Extracts the agent roles from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent roles      \"\"\"      agent_roles = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          agent_type = parts[1].strip()          agent_role = {\"name\": name, \"agent_type\": agent_type}          agent_roles[name] = agent_role      return agent_roles# %%def get_parameter_combinations(abm):      \"\"\"      Extracts the parameter combinations from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the parameter combinations      \"\"\"      parameters = []      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          params = {}           ",
    "2": "  \"\"\"# %%def get_agent_sets(abm):      \"\"\"      Extracts the agent sets from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent sets      \"\"\"      agent_sets = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          short_desc = parts[1].strip()          agent_set = {\"name\": name, \"short_description\": short_desc}          agent_sets[name] = agent_set      return agent_sets# %%def get_agent_roles(abm):      \"\"\"      Extracts the agent roles from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent roles      \"\"\"      agent_roles = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          agent_type = parts[1].strip()          agent_role = {\"name\": name, \"agent_type\": agent_type}          agent_roles[name] = agent_role      return agent_roles# %%def get_parameter_combinations(abm):      \"\"\"      Extracts the parameter combinations from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the parameter combinations      \"\"\"      parameters = []      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          params = {}           ",
    "3": "  \"\"\"# %%def get_agent_sets(abm):      \"\"\"      Extracts the agent sets from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent sets      \"\"\"      agent_sets = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          short_desc = parts[1].strip()          agent_set = {\"name\": name, \"short_description\": short_desc}          agent_sets[name] = agent_set      return agent_sets# %%def get_agent_roles(abm):      \"\"\"      Extracts the agent roles from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent roles      \"\"\"      agent_roles = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          agent_type = parts[1].strip()          agent_role = {\"name\": name, \"agent_type\": agent_type}          agent_roles[name] = agent_role      return agent_roles# %%def get_parameter_combinations(abm):      \"\"\"      Extracts the parameter combinations from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the parameter combinations      \"\"\"      parameters = []      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          params = {}           ",
    "4": "  \"\"\"# %%def get_agent_sets(abm):      \"\"\"      Extracts the agent sets from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent sets      \"\"\"      agent_sets = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          short_desc = parts[1].strip()          agent_set = {\"name\": name, \"short_description\": short_desc}          agent_sets[name] = agent_set      return agent_sets# %%def get_agent_roles(abm):      \"\"\"      Extracts the agent roles from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent roles      \"\"\"      agent_roles = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          agent_type = parts[1].strip()          agent_role = {\"name\": name, \"agent_type\": agent_type}          agent_roles[name] = agent_role      return agent_roles# %%def get_parameter_combinations(abm):      \"\"\"      Extracts the parameter combinations from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the parameter combinations      \"\"\"      parameters = []      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          params = {}           ",
    "5": "  \"\"\"# %%def get_agent_sets(abm):      \"\"\"      Extracts the agent sets from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent sets      \"\"\"      agent_sets = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          short_desc = parts[1].strip()          agent_set = {\"name\": name, \"short_description\": short_desc}          agent_sets[name] = agent_set      return agent_sets# %%def get_agent_roles(abm):      \"\"\"      Extracts the agent roles from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent roles      \"\"\"      agent_roles = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          agent_type = parts[1].strip()          agent_role = {\"name\": name, \"agent_type\": agent_type}          agent_roles[name] = agent_role      return agent_roles# %%def get_parameter_combinations(abm):      \"\"\"      Extracts the parameter combinations from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the parameter combinations      \"\"\"      parameters = []      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          params = {}           ",
    "6": "  \"\"\"# %%def get_agent_sets(abm):      \"\"\"      Extracts the agent sets from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent sets      \"\"\"      agent_sets = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          short_desc = parts[1].strip()          agent_set = {\"name\": name, \"short_description\": short_desc}          agent_sets[name] = agent_set      return agent_sets# %%def get_agent_roles(abm):      \"\"\"      Extracts the agent roles from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent roles      \"\"\"      agent_roles = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          agent_type = parts[1].strip()          agent_role = {\"name\": name, \"agent_type\": agent_type}          agent_roles[name] = agent_role      return agent_roles# %%def get_parameter_combinations(abm):      \"\"\"      Extracts the parameter combinations from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the parameter combinations      \"\"\"      parameters = []      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          params = {}           ",
    "7": "  \"\"\"# %%def get_agent_sets(abm):      \"\"\"      Extracts the agent sets from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent sets      \"\"\"      agent_sets = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          short_desc = parts[1].strip()          agent_set = {\"name\": name, \"short_description\": short_desc}          agent_sets[name] = agent_set      return agent_sets# %%def get_agent_roles(abm):      \"\"\"      Extracts the agent roles from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent roles      \"\"\"      agent_roles = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          agent_type = parts[1].strip()          agent_role = {\"name\": name, \"agent_type\": agent_type}          agent_roles[name] = agent_role      return agent_roles# %%def get_parameter_combinations(abm):      \"\"\"      Extracts the parameter combinations from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the parameter combinations      \"\"\"      parameters = []      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          params = {}           ",
    "8": "  \"\"\"# %%def get_agent_sets(abm):      \"\"\"      Extracts the agent sets from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent sets      \"\"\"      agent_sets = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          short_desc = parts[1].strip()          agent_set = {\"name\": name, \"short_description\": short_desc}          agent_sets[name] = agent_set      return agent_sets# %%def get_agent_roles(abm):      \"\"\"      Extracts the agent roles from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent roles      \"\"\"      agent_roles = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          agent_type = parts[1].strip()          agent_role = {\"name\": name, \"agent_type\": agent_type}          agent_roles[name] = agent_role      return agent_roles# %%def get_parameter_combinations(abm):      \"\"\"      Extracts the parameter combinations from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the parameter combinations      \"\"\"      parameters = []      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          params = {}           ",
    "9": "  \"\"\"# %%def get_agent_sets(abm):      \"\"\"      Extracts the agent sets from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent sets      \"\"\"      agent_sets = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          short_desc = parts[1].strip()          agent_set = {\"name\": name, \"short_description\": short_desc}          agent_sets[name] = agent_set      return agent_sets# %%def get_agent_roles(abm):      \"\"\"      Extracts the agent roles from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the agent roles      \"\"\"      agent_roles = {}      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          name = parts[0].strip()          agent_type = parts[1].strip()          agent_role = {\"name\": name, \"agent_type\": agent_type}          agent_roles[name] = agent_role      return agent_roles# %%def get_parameter_combinations(abm):      \"\"\"      Extracts the parameter combinations from the ABM text file.      Args:          abm: ABM text file      Returns:          JSON formatted dictionary containing the parameter combinations      \"\"\"      parameters = []      for line in abm.splitlines():          line = line.strip()          if len(line) == 0:              continue          if line.startswith(\"#\"):              continue          parts = line.split(\":\")          params = {}           "
}